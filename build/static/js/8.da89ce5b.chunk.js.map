{"version":3,"sources":["data/methodsData.js","components/methods/Methods.jsx","data/learningData.js","components/cards/CardGallery.js","pages/Resources.jsx"],"names":["arrayMethods","title","def","desc","descr2","descr3","descr4","descr5","Methods","methods","map","method","_jsxs","className","children","_jsx","descr6","descr7","descr8","comparisons","CardGallery","comparison","date","frameworks","join","useCase","metrics","metric","name","winner","loser","percentDifference","Resources","console","log","id"],"mappings":"iKAAaA,EAAe,CAC1B,CACEC,MAAO,2BACPC,IAAK,mCACLC,KAAK,+BACoBC,OAAO,+BACPC,OAAO,6CACOC,OAAO,gEAGhD,CACEL,MAAO,+BACPC,IAAK,wDACLC,KAAK,qCAC0BC,OAAO,+CACGC,OAAO,wDAGlD,CACEJ,MAAO,0BACPC,IAAK,8FACLC,KAAK,qCAC0BC,OAAO,0DACcC,OAAO,2CAG7D,CACEJ,MAAO,2BACPC,IAAK,iGACLC,KAAK,qCAC0BC,OAAO,6DACiBC,OAAO,kDAGhE,CACEJ,MAAO,4BACPC,IAAK,4DACLC,KAAK,8BACmBC,OAAO,sDACiBC,OAAO,kBAC3CC,OAAO,oBACLC,OAAO,oBAEpB,CACDN,MAAO,6BACPC,IAAK,kGACLC,KAAK,qCAC0BE,OAAO,wCACJC,OAAO,2CAExC,CACDL,MAAO,4BACPC,IAAK,0GACLC,KAAK,+BACoBE,OAAO,sCACAC,OAAO,uCAEtC,CACDL,MAAO,yBACPC,IAAK,gDACLC,KAAK,wCAC6BE,OAAO,uCACRC,OAAO,oDAG1C,CACEL,MAAO,gCACPC,IAAK,yGACLC,KAAK,+BAEoBE,OAAO,0CACIC,OAAO,uCAG7C,CACEL,MAAO,wBACPC,IAAK,6GACLC,KAAK,mCAILC,OAAO,8DAEPC,OAAO,sDAGT,CACEJ,MAAO,wBACPC,IAAK,mEACLC,KAAK,+BACoBC,OAAO,uCACCC,OAAO,6CAG1C,CACEJ,MAAO,yBACPC,IAAK,4FACLC,KAAK,+BACoBC,OAAO,2CACKC,OAAO,sDAG9C,CACEJ,MAAO,2BACPC,IAAK,uFACLC,KAAK,+BACoBC,OAAO,+FACyDC,OAAO,yCAGlG,CACEJ,MAAO,gCACPC,IAAK,2GACLC,KAAK,+BAELC,OAAO,oGAEPC,OAAO,yCAGT,CACEJ,MAAO,4BACPC,IAAK,kDACLC,KAAK,8BACmBC,OAAO,sBACfC,OAAO,+CAGzB,CACEJ,MAAO,0BACPC,IAAK,oEACLC,KAAK,8BACmBC,OAAO,6CACQC,OAAO,iDAGhD,CACEJ,MAAO,0BACPC,IAAK,mDACLC,KAAK,oCACyBC,OAAO,yCACFC,OAAO,8CAG5C,CACEJ,MAAO,yBACPC,IAAK,wGACLC,KAAK,oCACyBC,OAAO,4DACiBC,OAAO,8CAG/D,CACEJ,MAAO,yBACPC,IAAK,wEACLC,KAAK,sDAC2CC,OAAO,mBAC1CC,OAAO,uEAGtB,CACEJ,MAAO,2BACPC,IAAK,mHACLC,KAAK,0FAG8CC,OAAO,sDACVC,OAAO,uDAGzD,CACEJ,MAAO,mCACPC,IAAK,gFACLC,KAAK,gCACqBC,OAAO,gDACSC,OAAO,iDAGnD,CACEJ,MAAO,6BACPC,IAAK,sEACLC,KAAK,gCACqBC,OAAO,wCACCC,OAAO,+CAG3C,CACEJ,MAAO,4BACPC,IAAK,kGACLC,KAAK,gCACqBC,OAAO,8CACOC,OAAO,uDAIjD,CACEJ,MAAO,eACPC,IAAK,sEACLC,KAAK,+BACoBC,OAAO,4CACMC,OAAO,oEAI/C,CACEJ,MAAO,kBACPC,IAAK,mDACLC,KAAK,iCACsBC,OAAO,+CACOC,OAAO,+CAGlD,CACEJ,MAAO,aACPC,IAAK,mHACLC,KAAK,gDACqCE,OAAO,2DAGnD,CACA,G,OC/KaG,EA/BC,WAEd,IAAIC,EAAUT,EAAaU,KAAI,SAACC,GAAM,OACxCC,eAAA,OAAKC,UAAU,+DAA8DC,SAAA,CAG3EC,cAAA,MAAIF,UAAU,4HAA2HC,SAAEH,EAAOV,QAClJc,cAAA,KAAGF,UAAU,6BAA4BC,SAAEH,EAAOT,MAClDU,eAAA,OAAKC,UAAU,6BAA4BC,SAAA,CACzCC,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOR,OAC9EY,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOP,SAC9EW,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAON,SAC9EU,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOL,SAC9ES,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOJ,SAC9EQ,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOK,SAC9ED,cAAA,QAAMF,UAAU,sDAAqDC,SAAEH,EAAOM,SAC9EF,cAAA,QAAMF,UAAU,gBAAeC,SAAEH,EAAOO,cAEtC,IAIJ,OAEIH,cAAA,OAAKF,UAAU,+FAA8FC,SAE5GL,GAGP,EC3CaU,EAAc,CACzB,CACE,MAAS,mCACT,KAAQ,gBACR,WAAc,CAAC,QAAS,WACxB,QAAW,sBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,QACV,MAAS,UACT,kBAAqB,IAEvB,CACE,KAAQ,uBACR,OAAU,QACV,MAAS,UACT,kBAAqB,MAI3B,CACE,MAAS,kCACT,KAAQ,eACR,WAAc,CAAC,QAAS,aACxB,QAAW,mBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,QACV,MAAS,YACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,QACV,MAAS,YACT,kBAAqB,MAI3B,CACE,MAAS,2CACT,KAAQ,iBACR,WAAc,CAAC,QAAS,UAAW,UACnC,QAAW,mBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,QACV,MAAS,UACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,QACV,MAAS,SACT,kBAAqB,MAI3B,CACE,MAAS,uCACT,KAAQ,gBACR,WAAc,CAAC,SAAU,QAAS,OAClC,QAAW,mBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,SACV,MAAS,QACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,SACV,MAAS,MACT,kBAAqB,MAI3B,CACE,MAAS,oDACT,KAAQ,eACR,WAAc,CAAC,UAAW,SAAU,YACpC,QAAW,yBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,WACV,MAAS,UACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,WACV,MAAS,SACT,kBAAqB,MAI3B,CACE,MAAS,qDACT,KAAQ,iBACR,WAAc,CAAC,UAAW,QAAS,MAAO,UAC1C,QAAW,qBACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,SACV,MAAS,MACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,SACV,MAAS,UACT,kBAAqB,MAI3B,CACE,MAAS,8CACT,KAAQ,YACR,WAAc,CAAC,QAAS,MAAO,UAC/B,QAAW,0BACX,QAAW,CACT,CACE,KAAQ,YACR,OAAU,SACV,MAAS,MACT,kBAAqB,IAEvB,CACE,KAAQ,cACR,OAAU,SACV,MAAS,QACT,kBAAqB,MAI3B,CACE,MAAS,6DACT,KAAQ,eACR,WAAc,CAAC,QAAS,UAAW,SAAU,WAC7C,QAAW,6BACX,QAAW,CACT,CACE,KAAQ,+BACR,OAAU,QACV,MAAS,UACT,kBAAqB,IAEvB,CACE,KAAQ,4BACR,OAAU,QACV,MAAS,UACT,kBAAqB,MAI3B,CACE,MAAS,2CACT,KAAQ,YACR,WAAc,CAAC,QAAS,UAAW,UACnC,QAAW,mBACX,QAAW,CACT,CACE,KAAQ,iBACR,OAAU,QACV,MAAS,UACT,kBAAqB,IAEvB,CACE,KAAQ,iCACR,OAAU,QACV,MAAS,SACT,kBAAqB,OClJdC,EA5BK,WAClB,OACFL,cAAA,OAAAD,SACSK,EAAYT,KAAI,SAACW,GAAU,OAC5BT,eAAA,OAAKC,UAAU,sCAAqCC,SAAA,CAClDC,cAAA,MAAIF,UAAU,gCAA+BC,SAAEO,EAAWpB,QAC1Dc,cAAA,KAAGF,UAAU,0BAAyBC,SAAEO,EAAWC,OACnDV,eAAA,KAAGC,UAAU,0BAAyBC,SAAA,CAAC,eAAaO,EAAWE,WAAWC,KAAK,SAC/EZ,eAAA,KAAGC,UAAU,0BAAyBC,SAAA,CAAC,aAAWO,EAAWI,WAC7DV,cAAA,MAAAD,SACGO,EAAWK,QAAQhB,KAAI,SAACiB,GAAM,OAC7Bf,eAAA,MAAAE,SAAA,CACEF,eAAA,QAAMC,UAAU,mBAAkBC,SAAA,CAAEa,EAAOC,KAAK,QAChDb,cAAA,QAAMF,UAAU,kCAAiCC,SAAEa,EAAOE,SAC1Dd,cAAA,QAAAD,SAAM,YACNC,cAAA,QAAMF,UAAU,gCAA+BC,SAAEa,EAAOG,QACxDf,cAAA,QAAAD,SAAM,SACNF,eAAA,QAAMC,UAAU,mBAAkBC,SAAA,CAAEa,EAAOI,kBAAkB,SANtDJ,EAAOC,KAOX,QAd+CP,EAAWpB,MAiB/D,KAKd,ECPe+B,UAlBG,WAGjB,OADAC,QAAQC,IAAId,GAEXR,eAAA,WAASC,UAAU,wCAAuCC,SAAA,CACzDC,cAAA,OAAKoB,GAAG,WAAWtB,UAAU,cAAaC,SACzCC,cAAA,KAAGF,UAAU,uHAAsHC,SAAC,gBAIrIC,cAACP,EAAO,IACRO,cAAA,OAAKF,UAAU,gEAA+DC,SAC7EC,cAACK,EAAW,QAIhB,C","file":"static/js/8.da89ce5b.chunk.js","sourcesContent":["export const arrayMethods = [\n  {\n    title: \"Array.prototype.concat()\",\n    def: \"Concatenates two or more arrays.\",\n    desc: `\nconst array1 = [1, 2, 3]; `, descr2: `\nconst array2 = [4, 5, 6]; `, descr3: `\nconst newArray = array1.concat(array2); `, descr4: `react\nconsole.log(newArray); // Output: [1, 2, 3, 4, 5, 6] `\n  },\n  {\n    title: \"Array.prototype.copyWithin()\",\n    def: \"Copies a sequence of array elements within the array.\",\n    desc: `\nconst array1 = [1, 2, 3, 4, 5]; `, descr2: `\nconst newArray = array1.copyWithin(1, 3); `, descr3: `\nconsole.log(newArray); // Output: [1, 4, 5, 4, 5] `\n  },\n  {\n    title: \"Array.prototype.every()\",\n    def: \"Tests whether all elements in the array pass the test implemented by the provided function.\",\n    desc: `\nconst array1 = [1, 2, 3, 4, 5]; `, descr2: `\nconst result = array1.every(element => element > 0); `, descr3: `\nconsole.log(result); // Output: true `\n  },\n  {\n    title: \"Array.prototype.filter()\",\n    def: \"Creates a new array with all elements that pass the test implemented by the provided function.\",\n    desc: `\nconst array1 = [1, 2, 3, 4, 5]; `, descr2: `\nconst newArray = array1.filter(element => element > 2); `, descr3: `\nconsole.log(newArray); // Output: [3, 4, 5] `\n  },\n  {\n    title: \"Array.prototype.forEach()\",\n    def: \"Executes a provided function once for each array element.\",\n    desc: `\nconst array1 = [1, 2, 3];`, descr2: `\narray1.forEach(element => console.log(element)); `, descr3: `\n// Output: 1 `, descr4: `\n//         2   `, descr5: `\n//         3  `\n  }, {\n    title: \"Array.prototype.includes()\",\n    def: \"Determines whether an array includes a certain element, returning true or false as appropriate.\",\n    desc: `\n      const array1 = [1, 2, 3]; `, descr3: `\nconst result = array1.includes(2); `, descr4: `\nconsole.log(result); // Output: true `\n  }, {\n    title: \"Array.prototype.indexOf()\",\n    def: \"Returns the first index at which a given element can be found in the array, or -1 if it is not present.\",\n    desc: `\nconst array1 = [1, 2, 3]; `, descr3: `\nconst index = array1.indexOf(2); `, descr4: `\nconsole.log(index); // Output: 1 `\n  }, {\n    title: \"Array.prototype.join()\",\n    def: \"Joins all elements of an array into a string.\",\n    desc: `\nconst array1 = ['Hello', 'World']; `, descr3: `\nconst string = array1.join(' ');  `, descr4: `\nconsole.log(string); // Output: 'Hello World' `\n  },\n  {\n    title: \"Array.prototype.lastIndexOf()\",\n    def: \"Returns the last index at which a given element can be found in the array, or -1 if it is not present.\",\n    desc:\n      `\nconst array1 = [1, 2, 3]; `, descr3: `\nconst index = array1.lastIndexOf(2); `, descr4: `\nconsole.log(index); // Output: 1 `\n  },\n  {\n    title: \"Array.prototype.map()\",\n    def: \"Creates a new array with the results of calling a provided function on every element in the calling array.\",\n    desc: `\n\n\nconst array1 = [1, 2, 3]; `,\n    descr2: `\n    const newArray = array1.map(element => element * 2); `,\n    descr3: `\n    console.log(newArray); // Output: [2, 4, 6] `\n  },\n  {\n    title: \"Array.prototype.pop()\",\n    def: \"Removes the last element from an array and returns that element.\",\n    desc: `\nconst array1 = [1, 2, 3]; `, descr2: `\nconst lastElement = array1.pop(); `, descr3: `\nconsole.log(lastElement); // Output: 3 `\n  },\n  {\n    title: \"Array.prototype.push()\",\n    def: \"Adds one or more elements to the end of an array and returns the new length of the array.\",\n    desc: `\nconst array1 = [1, 2, 3]; `, descr2: `\nconst newLength = array1.push(4, 5);  `, descr3: `\nconsole.log(array1); // Output: [1, 2, 3, 4, 5] `\n  },\n  {\n    title: \"Array.prototype.reduce()\",\n    def: \"Executes a provided function for each value of the array and returns a single value.\",\n    desc: `\nconst array1 = [1, 2, 3]; `, descr2: `\n    const sum = array1.reduce((accumulator, currentValue) => accumulator + currentValue); `, descr3: `\n    console.log(sum); // Output: 6 `\n  },\n  {\n    title: \"Array.prototype.reduceRight()\",\n    def: \"Executes a provided function for each value of the array (from right-to-left) and returns a single value\",\n    desc: `\nconst array1 = [1, 2, 3]; `,\n    descr2: `\n    const sum = array1.reduceRight((accumulator, currentValue) => accumulator + currentValue); `,\n    descr3: `\n    console.log(sum); // Output: 6 `\n  },\n  {\n    title: \"Array.prototype.reverse()\",\n    def: \"Reverses the order of the elements in an array.\",\n    desc: `\nconst array1 = [1, 2, 3];`, descr2: `\narray1.reverse();`, descr3: `\nconsole.log(array1); // Output: [3, 2, 1]`\n  },\n  {\n    title: \"Array.prototype.shift()\",\n    def: \"Removes the first element from an array and returns that element.\",\n    desc: `\nconst array1 = [1, 2, 3];`, descr2: `\n    const firstElement = array1.shift();`, descr3: `\n    console.log(firstElement); // Output: 1`\n  },\n  {\n    title: \"Array.prototype.slice()\",\n    def: \"Returns a shallow copy of a portion of an array.\",\n    desc: `\nconst array1 = [1, 2, 3, 4, 5];`, descr2: `\nconst newArray = array1.slice(1, 3);`, descr3: `\nconsole.log(newArray); // Output: [2, 3]`\n  },\n  {\n    title: \"Array.prototype.some()\",\n    def: \"Tests whether at least one element in the array passes the test implemented by the provided function.\",\n    desc: `\nconst array1 = [1, 2, 3, 4, 5];`, descr2: `\n    const result = array1.some(element => element > 3);`, descr3: `\n    console.log(result); // Output: true`\n  },\n  {\n    title: \"Array.prototype.sort()\",\n    def: \"Sorts the elements of an array in place and returns the sorted array.\",\n    desc: `\nconst array1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];`, descr2: `\narray1.sort();`, descr3: `\nconsole.log(array1); // Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]`\n  },\n  {\n    title: \"Array.prototype.splice()\",\n    def: \"Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.\",\n    desc:\n      `\nconst array1 = [1, 2, 3, 4, 5];\n  const removedElements = array1.splice(1, 2, 6, 7);`, descr2: `\n  console.log(array1); // Output: [1, 6, 7, 4, 5]`, descr3: `\n  console.log(removedElements); // Output: [2, 3]`\n  },\n  {\n    title: \"Array.prototype.toLocaleString()\",\n    def: \"Returns a string representing the elements of an array in a localized format.\",\n    desc: `\n  const array1 = [1, 2, 3];`, descr2: `\n    const string = array1.toLocaleString();`, descr3: `\n    console.log(string); // Output: '1,2,3'`\n  },\n  {\n    title: \"Array.prototype.toString()\",\n    def: \"Returns a string representing the specified array and its elements.\",\n    desc: `\n  const array1 = [1, 2, 3];`, descr2: `\n  const string = array1.toString();`, descr3: `\n  console.log(string); // Output: '1,2,3'`\n  },\n  {\n    title: \"Array.prototype.unshift()\",\n    def: \"Adds one or more elements to the beginning of an array and returns the new length of the array.\",\n    desc: `\n  const array1 = [1, 2, 3];`, descr2: `\n  const newLength = array1.unshift(4, 5);`, descr3: `\n  console.log(array1); // Output: [4, 5, 1, 2, 3]`\n  },\n\n  {\n    title: \"Array.from()\",\n    def: \"Creates a new array instance from an array-like or iterable object.\",\n    desc: `\n  const string = 'hello'; `, descr2: `\n    const array1 = Array.from(string); `, descr3: `\n    console.log(array1); // Output: ['h', 'e', 'l', 'l', 'o'] `\n  },\n\n  {\n    title: \"Array.isArray()\",\n    def: \"Determines whether the passed value is an Array.\",\n    desc: `\n  const array1 = [1, 2, 3]; `, descr2: `\n    const result = Array.isArray(array1); `, descr3: `\n    console.log(result); // Output: true `\n  },\n  {\n    title: \"Array.of()\",\n    def: \"Creates a new array instance with a variable number of arguments, regardless of number or type of the arguments.\",\n    desc: `\n  const array1 = Array.of(1, 'two', true); `, descr3: `\n    console.log(array1); // Output: [1, 'two', true] `\n  },\n  {\n  }]\n\n// export const stringMethods = [{\n//   title: \"String.prototype.charAt()\",\n//   def: \"Returns the character at the specified index in a string.\",\n//   desc: `\n//   const string = 'hello';\n//     const char = string.charAt(1);\n//     console.log(char); // Output: 'e'\n//   },\n//   {\n//     title: \"String.prototype.charCodeAt()\",\n//     def: \"Returns the Unicode of the character at the specified index in a string.\",\n//     desc: `\n//   const string = 'hello';\n//   const charCode = string.charCodeAt(1);\n//   console.log(charCode); // Output: 101\n// },\n// {\n//   title: \"String.prototype.concat()\",\n//   def: \"Joins two or more strings, and returns a new joined strings.\",\n//   desc: `\n//   const string1 = 'hello';\n//     const string2 = 'world';\n//     const string3 = string1.concat(' ', string2);\n//     console.log(string3); // Output: 'hello world'\n//   },\n//   {\n//     title: \"String.prototype.endsWith()\",\n//     def: \"Determines whether a string ends with the characters of a specified string, returning true or false as appropriate.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.endsWith('world')); // Output: true\n//   console.log(string.endsWith('hello')); // Output: false\n// },\n// {\n//   title: \"String.prototype.includes()\",\n//   def: \"Determines whether one string may be found within another string, returning true or false as appropriate.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.includes('hello')); // Output: true\n//     console.log(string.includes('world')); // Output: true\n//     console.log(string.includes('foo')); // Output: false\n//   },\n//   {\n//     title: \"String.prototype.indexOf()\",\n//     def: \"Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.indexOf('hello')); // Output: 0\n//   console.log(string.indexOf('world')); // Output: 6\n//   console.log(string.indexOf('foo')); // Output: -1\n// },\n// {\n//   title: \"String.prototype.lastIndexOf()\",\n//   def: \"Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.lastIndexOf('hello')); // Output: 0\n//     console.log(string.lastIndexOf('world')); // Output: 6\n//     console.log(string.lastIndexOf('foo')); // Output: -1\n//   },\n//   {\n//     title: \"String.prototype.localeCompare()\",\n//     def: \"Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\",\n//     desc: `\n//   const string1 = 'hello';\n//   const string2 = 'world';\n\n//   console.log(string1.localeCompare(string2)); // Output: -1\n//   console.log(string2.localeCompare(string1)); // Output: 1\n//   console.log(string1.localeCompare(string1)); // Output: 0\n// },\n// {\n//   title: \"String.prototype.match()\",\n//   def: \"Used to retrieve the matches when matching a string against a regular expression.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.match(/hello/)); // Output: ['hello']\n//     console.log(string.match(/world/)); // Output: ['world']\n//     console.log(string.match(/foo/)); // Output: null\n//   },\n//   {\n//     title: \"String.prototype.normalize()\",\n//     def: \"Returns the Unicode Normalization Form of a given string.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.normalize()); // Output: 'hello world'\n// },\n// {\n//   title: \"String.prototype.padEnd()\",\n//   def: \"Pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.padEnd(15, 'foo')); // Output: 'hello worldfoof'\n//   },\n//   {\n//     title: \"String.prototype.padStart()\",\n//     def: \"Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.padStart(15, 'foo')); // Output: 'foofoofoohello world'\n// },\n// {\n//   title: \"String.prototype.repeat()\",\n//   def: \"Constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.repeat(3)); // Output: 'hello worldhello worldhello world'\n//   },\n//   {\n//     title: \"String.prototype.replace()\",\n//     def: \"Returns a new string with some or all matches of a pattern replaced by a replacement.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.replace('hello', 'foo')); // Output: 'foo world'\n// },\n// {\n//   title: \"String.prototype.search()\",\n//   def: \"Executes the search for a match between a regular expression and this String object.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.search(/hello/)); // Output: 0\n//     console.log(string.search(/world/)); // Output: 6\n//     console.log(string.search(/foo/)); // Output: -1\n//   },\n//   {\n//     title: \"String.prototype.slice()\",\n//     def: \"Extracts a section of a string and returns it as a new string, without modifying the original string.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.slice(0, 5)); // Output: 'hello'\n// },\n// {\n//   title: \"String.prototype.split()\",\n//   def: \"Splits a String object into an array of strings by separating the string into substrings.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.split(' ')); // Output: ['hello', 'world']\n//   },\n//   {\n//     title: \"String.prototype.startsWith()\",\n//     def: \"Determines whether a string begins with the characters of a specified string, returning true or false as appropriate.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.startsWith('hello')); // Output: true\n//   console.log(string.startsWith('world')); // Output: false\n// },\n// {\n//   title: \"String.prototype.substr()\",\n//   def: \"Returns the characters in a string beginning at the specified location through the specified number of characters.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.substr(0, 5)); // Output: 'hello'\n//   },\n//   {\n//     title: \"String.prototype.substring()\",\n//     def: \"Returns the characters in a string between two indexes into the string.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.substring(0, 5)); // Output: 'hello'\n// },\n// {\n//   title: \"String.prototype.toLocaleLowerCase()\",\n//   def: \"Returns the calling string value converted to lower case, according to any locale-specific case mappings.\",\n//   desc: `\n//   const string = 'HELLO WORLD';\n\n//     console.log(string.toLocaleLowerCase()); // Output: 'hello world'\n//   },\n//   {\n//     title: \"String.prototype.toLocaleUpperCase()\",\n//     def: \"Returns the calling string value converted to upper case, according to any locale-specific case mappings.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.toLocaleUpperCase()); // Output: 'HELLO WORLD'\n// },\n// {\n//   title: \"String.prototype.toLowerCase()\",\n//   def: \"Returns the calling string value converted to lower case.\",\n//   desc: `\n//   const string = 'HELLO WORLD';\n\n//     console.log(string.toLowerCase()); // Output: 'hello world'\n//   },\n//   {\n//     title: \"String.prototype.toString()\",\n//     def: \"Returns a string representing the specified object.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string.toString()); // Output: 'hello world'\n// },\n// {\n//   title: \"String.prototype.toUpperCase()\",\n//   def: \"Returns the calling string value converted to upper case.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.toUpperCase()); // Output: 'HELLO WORLD'\n//   },\n//   {\n//     title: \"String.prototype.trim()\",\n//     def: \"Removes whitespace from both ends of a string.\",\n//     desc: `\n//   const string = ' hello world ';\n\n//   console.log(string.trim()); // Output: 'hello world'\n// },\n// {\n//   title: \"String.prototype.trimEnd()\",\n//   def: \"Removes whitespace from the end of a string.\",\n//   desc: `\n//   const string = ' hello world ';\n\n//     console.log(string.trimEnd()); // Output: ' hello world'\n//   },\n//   {\n//     title: \"String.prototype.trimStart()\",\n//     def: \"Removes whitespace from the beginning of a string.\",\n//     desc: `\n//   const string = ' hello world ';\n\n//   console.log(string.trimStart()); // Output: 'hello world '\n// },\n// {\n//   title: \"String.prototype.valueOf()\",\n//   def: \"Returns the primitive value of a String object.\",\n//   desc: `\n//   const string = 'hello world';\n\n//     console.log(string.valueOf()); // Output: 'hello world'\n//   },\n//   {\n//     title: \"String.prototype[@@iterator]()\",\n//     def: \"Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.\",\n//     desc: `\n//   const string = 'hello world';\n\n//   console.log(string[Symbol.iterator]()); // Output: String Iterator {}\n// },\n// {\n//   title: \"String.raw()\",\n//   def: \"Returns a raw string.\",\n//   desc: `\n//   console.log(String.raw({ raw: 'test' }, 0, 1, 2)); // Output: 't0e1s2t'\n//   },\n//   {\n//     title: \"String.fromCharCode()\",\n//     def: \"Returns a string created from the specified sequence of UTF-16 code units.\",\n//     desc: `\n//   console.log(String.fromCharCode(104, 101, 108, 108, 111)); // Output: 'hello'\n// },\n// {\n//   title: \"String.fromCodePoint()\",\n//   def: \"Returns a string created by using the specified sequence of code points.\",\n//   desc: `\n//   console.log(String.fromCodePoint(104, 101, 108, 108, 111)); // Output: 'hello'\n//   },\n//   {\n//   }]\n\n// export const dateMethods = [{\n//   title: \"Date.prototype.getDate()\",\n//   def: \"Returns the day of the month for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const day = date1.getDate();\n//   console.log(day); // Output: 8\n//   `\n// },\n// {\n//   title: \"Date.prototype.getDay()\",\n//   def: \"Returns the day of the week for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n// const dayOfWeek = date1.getDay();\n// console.log(dayOfWeek); // Output: 3 (Wednesday)\n//   },\n// {\n//   title: \"Date.prototype.getFullYear()\",\n//     def: \"Returns the year for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const year = date1.getFullYear();\n//   console.log(year); // Output: 2023\n// },\n// {\n//   title: \"Date.prototype.getHours()\",\n//   def: \"Returns the hour for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const hour = date1.getHours();\n//   console.log(hour); // Output: 12\n// },\n// {\n//   title: \"Date.prototype.getMilliseconds()\",\n//     def: \"Returns the milliseconds for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00.123');\n//   const milliseconds = date1.getMilliseconds();\n//   console.log(milliseconds); // Output: 123\n// },\n// {\n//   title: \"Date.prototype.getMinutes()\",\n//   def: \"Returns the minutes for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:15:00');\n//   const minutes = date1.getMinutes();\n//   console.log(minutes); // Output: 15\n// },\n// {\n//   title: \"Date.prototype.getMonth()\",\n//     def: \"Returns the month for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const month = date1.getMonth();\n//   console.log(month\n//     },\n// {\n//   title: \"Date.prototype.getSeconds()\",\n//   def: \"Returns the seconds for a specified date according to local time.\",\n//   desc: `\n// const date1 = new Date('March 8, 2023 12:00:30');\n//   const seconds = date1.getSeconds();\n//   console.log(seconds); // Output: 30\n// },\n// {\n//   title: \"Date.prototype.getTime()\",\n//     def: \"Returns the numeric value corresponding to the time for a specified date according to universal time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const time = date1.getTime();\n//   console.log(time); // Output: 1675605600000\n// },\n// {\n//   title: \"Date.prototype.getTimezoneOffset()\",\n//   def: \"Returns the time-zone offset in minutes for the current locale.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const offset = date1.getTimezoneOffset();\n//   console.log(offset); // Output: -300 (5 hours behind UTC)\n// },\n// {\n//   title: \"Date.prototype.getUTCDate()\",\n//     def: \"Returns the day (date) of the month in the specified date according to universal time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const day = date1.getUTCDate();\n//   console.log(day); // Output: 8\n// },\n// {\n//   title: \"Date.prototype.getUTCDay()\",\n//   def: \"Returns the day of the week in the specified date according to universal time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const dayOfWeek = date1.getUTCDay();\n//   console.log(dayOfWeek); // Output: 3 (Wednesday)\n// },\n// {\n//   title: \"Date.prototype.getUTCFullYear()\",\n//     def: \"Returns the year in the specified date according to universal time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const year = date1.getUTCFullYear();\n//   console.log(year); // Output: 2023\n// },\n// {\n//   title: \"Date.prototype.getUTCHours()\",\n//   def: \"Returns the hour in the specified date according to universal time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const hour = date1.getUTCHours();\n//   console.log(hour); // Output: 17 (12pm UTC is 5 hours ahead of EST)\n// },\n// {\n//   title: \"Date.prototype.getUTCMilliseconds()\",\n//     def: \"Returns the milliseconds in the specified date according to universal time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00.123');\n//   const milliseconds = date1.getUTCMilliseconds();\n//   console.log(milliseconds); // Output: 123\n// },\n// {\n//   title: \"Date.prototype.getUTCMinutes()\",\n//   def: \"Returns the minutes in the specified date according to universal time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:15:00');\n//   const minutes = date1.getUTCMinutes();\n//   console.log(minutes); // Output: 15\n// },\n// {\n//   title: \"Date.prototype.getUTCMonth()\",\n//     def: \"Returns the month in the specified date according to universal time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   const month = date1.getUTCMonth();\n//   console.log(month); // Output: 2 (March is the 3rd month, but 0-based indexing)\n// },\n// {\n//   title: \"Date.prototype.setDate()\",\n//   def: \"Sets the day of the month for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setDate(10);\n//   console.log(date1); // Output: 'Sat Mar 10 2023 12:00:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setFullYear()\",\n//     def: \"Sets the year for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setFullYear(2024);\n//   console.log(date1); // Output: 'Tue Mar 08 2024 12:00:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setHours()\",\n//   def: \"Sets the hour for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setHours(13);\n//   console.log(date1); // Output: 'Wed Mar 08 2023 13:00:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setMilliseconds()\",\n//     def: \"Sets the milliseconds for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setMilliseconds(500);\n//   console.log(date1); // Output: 'Wed Mar 08 2023 12:00:00.500 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setMinutes()\",\n//   def: \"Sets the minutes for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setMinutes(30);\n//   console.log(date1); // Output: 'Wed Mar 08 2023 12:30:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setMonth()\",\n//     def: \"Sets the month for a specified date according to local time.\",\n//       desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setMonth(4);\n//   console.log(date1); // Output: 'Fri May 08 2023 12:00:00 GMT-0400 (Eastern Daylight Time)'\n// },\n// {\n//   title: \"Date.prototype.setSeconds()\",\n//   def: \"Sets the seconds for a specified date according to local time.\",\n//   desc: `\n//   const date1 = new Date('March 8, 2023 12:00:00'); `, descr2: `\n//   date1.setSeconds(45); `, descr3: `\n//   console.log(date1); // Output: 'Wed Mar 08 2023 12:00:45 GMT-0500 (Eastern Standard Time)},\n//   {\n\n//     title: \"Date.prototype.setTime()\",\n//       def: \"Sets the Date object to the time represented by a number of milliseconds since January 1, 1970,00:00:00 UTC.\",\n//         desc: `\n//       `const date1 = new Date('March 8, 2023 12:00:00'); `, descr2: `\n//     date1.setTime(1675606000000); `, descr3: `\n//     console.log(date1); // Output: 'Wed Mar 08 2023 12:20:00 GMT-0500 (Eastern Standard Time)'\n//   },\n//   {\n\n//     title: \"Date.prototype.setUTCFullYear()\",\n//       def: \"Sets the year for a specified date according to universal time.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setUTCFullYear(2024);\n//   console.log(date1); // Output: 'Fri Mar 08 2024 12:00:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setUTCHours()\",\n//   def: \"Sets the hour for a specified date according to universal time.\",\n//   desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//     date1.setUTCHours(18);\n//     console.log(date1); // Output: 'Wed Mar 08 2023 13:00:00 GMT-0500 (Eastern Standard Time)'\n//   },\n//   {\n//     title: \"Date.prototype.setUTCMilliseconds()\",\n//       def: \"Sets the milliseconds for a specified date according to universal time.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setUTCMilliseconds(500);\n//   console.log(date1); // Output: 'Wed Mar 08 2023 12:00:00.500 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.setUTCMinutes()\",\n//   def: \"Sets the minutes for a specified date according to universal time.\",\n//   desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//     date1.setUTCMinutes(30);\n//     console.log(date1); // Output: 'Wed Mar 08 2023 12:30:00 GMT-0500 (Eastern Standard Time)'\n//   },\n//   {\n//     title: \"Date.prototype.setUTCMonth()\",\n//       def: \"Sets the month for a specified date according to universal time.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   date1.setUTCMonth(4);\n//   console.log(date1); // Output: 'Tue May 08 2023 08:00:00 GMT-0400 (Eastern Daylight Time)'\n// },\n// {\n//   title: \"Date.prototype.setUTCSeconds()\",\n//   def: \"Sets the seconds for a specified date according to universal time.\",\n//   desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//     date1.setUTCSeconds(45);\n//     console.log(date1); // Output: 'Wed Mar 08 2023 12:00:45 GMT-0500 (Eastern Standard Time)'\n//   },\n//   {\n//     title: \"Date.prototype.toDateString()\",\n//       def: \"Returns the date portion of a Date object as a readable string.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   const dateString = date1.toDateString();\n//   console.log(dateString); // Output: 'Wed Mar 08 2023'\n// },\n// {\n//   title: \"Date.prototype.toISOString()\",\n//   def: \"Returns a string representing the Date object in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ).\",\n//   desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//     const isoString = date1.toISOString();\n//     console.log(isoString); // Output: '2023-03-08T17:00:00.000Z'\n//   },\n//   {\n//     title: \"Date.prototype.toJSON()\",\n//       def: \"Returns a string representing the Date object in JSON format.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   const jsonString = JSON.stringify(date1);\n//   console.log(jsonString);\n// },\n// {\n\n\n//   title: \"Date.prototype.toLocaleDateString()\",\n//   def: \"Returns a string representing the date portion of a Date object in a locale-specific format.\",\n//   desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00',\n// const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n//     const dateString = date1.toLocaleDateString('en-US', options);\n//     console.log(dateString); // Output: 'Wednesday, March 8, 2023'\n//   },\n//   {\n//     title: \"Date.prototype.toLocaleString()\",\n//       def: \"Returns a string representing the Date object in a locale-specific format.\",\n//         desc: `\n//     const date1 = new Date('March 8, 2023 12:00:00');\n//   const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };\n//   const dateString = date1.toLocaleString('en-US', options);\n//   console.log(dateString); // Output: 'Wednesday, March 8, 2023, 12:00 PM},\n//     {\n//   title: \"Date.prototype.toLocaleTimeString()\",\n//   def: \"Returns a string representing the time portion of a Date object in a locale-specific format.\",\n//   desc: `\n// const date1 = new Date('March 8, 2023 12:00:00');\n//     const options = { hour: 'numeric', minute: 'numeric', second: 'numeric' };\n//     const timeString = date1.toLocaleTimeString('en-US', options);\n//     console.log(timeString); // Output: '12:00:00 PM'\n//   },\n//   {\n//     title: \"Date.prototype.toString()\",\n//       def: \"Returns a string representing the Date object.\",\n//         desc: `\n// const date1 = new Date('March 8, 2023 12:00:00');\n//   const string = date1.toString();\n//   console.log(string); // Output: 'Wed Mar 08 2023 12:00:00 GMT-0500 (Eastern Standard Time)'\n// },\n// {\n//   title: \"Date.prototype.toTimeString()\",\n//   def: \"Returns a string representing the time portion of a Date object.\",\n//   desc: `\n// const date1 = new Date('March 8, 2023 12:00:00');\n//     const timeString = date1.toTimeString();\n//     console.log(timeString); // Output: '12:00:00 GMT-0500 (Eastern Standard Time)'\n//   },\n//   {\n//     title: \"Date.prototype.toUTCString()\",\n//       def: \"Converts a Date object to a string, according to universal time.\",\n//         desc: `\n// const date1 = new Date('March 8, 2023 12:00:00');\n//   const utcString = date1.toUTCString();\n//   console.log(utcString); // Output: 'Wed, 08 Mar 2023 17:00:00 GMT},\n//     {\n//   title: \"Date.now()\",\n//   def: \"Returns the numeric value corresponding to the current time\",\n//   def: \"the number of milliseconds elapsed since January 1, 1970, 00:00:00 UTC.\",\n//   desc: `\n//           `const now = Date.now(,\n//   console.log(now); // Output: 1646761609555\n// },\n// {\n// }]\n\n\n","import React from 'react';\nimport { arrayMethods } from '../../data/methodsData';\n\nconst codeStyle = {\n  fontFamily: 'Consolas, \"courier new\"',\n  color: '#ff6600',\n  backgroundColor: '#333333',\n  padding: '2px',\n  fontSize: '105%',\n  borderRadius: '5px',\n};\n\n\n\nconst Methods = () => {\n  // <div className=\"grid grid-cols-1 mt-6 sm:grid-cols-1 mg:grid-cols-2 sm:gap-10\">\n  let methods = arrayMethods.map((method) => (\n<div className=\"p-4 m-1 bg-white border border-gray-200 rounded-lg shadow-md\">\n\n  {/* <h1 className=\"mb-2 text-lg font-medium text-orange-500\">{method.title}</h1> */}\n  <h1 className=\"p-4 font-bold text-center text-transparent text-md from-purple-600 via-pink-600 to-blue-600 bg-gradient-to-r bg-clip-text\">{method.title}</h1>\n  <p className=\"mb-4 text-sm text-gray-500\">{method.def}</p>\n  <div className=\"p-4 bg-gray-100 rounded-lg\">\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.desc}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr2}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr3}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr4}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr5}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr6}</code>\n    <code className=\"block mb-2 text-sm text-gray-800 dark:text-gray-200\">{method.descr7}</code>\n    <code className=\"block text-sm\">{method.descr8}</code>\n  </div>\n</div>\n\n  ));\n\n  return (\n\n      <div className=\"grid justify-between grid-cols-1 mt-6 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 sm:gap-10\">\n\n      {methods}\n      </div>\n  );\n};\n\nexport default Methods;\n","export const comparisons = [\n  {\n    \"title\": \"Astro vs. Next.js (landing page)\",\n    \"date\": \"December 2021\",\n    \"frameworks\": [\"Astro\", \"Next.js\"],\n    \"useCase\": \"simple landing page\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 12\n      },\n      {\n        \"name\": \"Resource Utilization\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 24\n      }\n    ]\n  },\n  {\n    \"title\": \"Astro vs. SvelteKit (blog site)\",\n    \"date\": \"October 2021\",\n    \"frameworks\": [\"Astro\", \"SvelteKit\"],\n    \"useCase\": \"simple blog site\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Astro\",\n        \"loser\": \"SvelteKit\",\n        \"percentDifference\": 20\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Astro\",\n        \"loser\": \"SvelteKit\",\n        \"percentDifference\": 45\n      }\n    ]\n  },\n  {\n    \"title\": \"Astro vs. Next.js vs. Gatsby (blog site)\",\n    \"date\": \"September 2021\",\n    \"frameworks\": [\"Astro\", \"Next.js\", \"Gatsby\"],\n    \"useCase\": \"simple blog site\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 30\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Gatsby\",\n        \"percentDifference\": 50\n      }\n    ]\n  },\n  {\n    \"title\": \"Svelte vs. React vs. Vue (blog site)\",\n    \"date\": \"November 2021\",\n    \"frameworks\": [\"Svelte\", \"React\", \"Vue\"],\n    \"useCase\": \"simple blog site\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"React\",\n        \"percentDifference\": 20\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"Vue\",\n        \"percentDifference\": 40\n      }\n    ]\n  },\n  {\n    \"title\": \"Next.js vs. Gatsby vs. Gridsome (e-commerce site)\",\n    \"date\": \"October 2021\",\n    \"frameworks\": [\"Next.js\", \"Gatsby\", \"Gridsome\"],\n    \"useCase\": \"simple e-commerce site\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Gridsome\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 10\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Gridsome\",\n        \"loser\": \"Gatsby\",\n        \"percentDifference\": 60\n      }\n    ]\n  },\n  {\n    \"title\": \"Angular vs. React vs. Vue vs. Svelte (weather app)\",\n    \"date\": \"September 2021\",\n    \"frameworks\": [\"Angular\", \"React\", \"Vue\", \"Svelte\"],\n    \"useCase\": \"simple weather app\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"Vue\",\n        \"percentDifference\": 30\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"Angular\",\n        \"percentDifference\": 70\n      }\n    ]\n  },\n  {\n    \"title\": \"React vs. Vue vs. Svelte (movie search app)\",\n    \"date\": \"July 2021\",\n    \"frameworks\": [\"React\", \"Vue\", \"Svelte\"],\n    \"useCase\": \"simple movie search app\",\n    \"metrics\": [\n      {\n        \"name\": \"Load Time\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"Vue\",\n        \"percentDifference\": 20\n      },\n      {\n        \"name\": \"Bundle Size\",\n        \"winner\": \"Svelte\",\n        \"loser\": \"React\",\n        \"percentDifference\": 50\n      }\n    ]\n  },\n  {\n    \"title\": \"Astro vs. Next.js vs. Gatsby vs. Nuxt.js (e-commerce site)\",\n    \"date\": \"October 2021\",\n    \"frameworks\": [\"Astro\", \"Next.js\", \"Gatsby\", \"Nuxt.js\"],\n    \"useCase\": \"real-world e-commerce site\",\n    \"metrics\": [\n      {\n        \"name\": \"First Contentful Paint (FCP)\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 44\n      },\n      {\n        \"name\": \"Time to Interactive (TTI)\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 30\n      }\n    ]\n  },\n  {\n    \"title\": \"Astro vs. Next.js vs. Gatsby (blog site)\",\n    \"date\": \"June 2021\",\n    \"frameworks\": [\"Astro\", \"Next.js\", \"Gatsby\"],\n    \"useCase\": \"simple blog site\",\n    \"metrics\": [\n      {\n        \"name\": \"Page Load Time\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Next.js\",\n        \"percentDifference\": 15\n      },\n      {\n        \"name\": \"Initial JavaScript Bundle Size\",\n        \"winner\": \"Astro\",\n        \"loser\": \"Gatsby\",\n        \"percentDifference\": 90\n      }\n    ]\n  }\n]\n\n","import React from \"react\";\nimport {comparisons} from \"../../data/learningData\";\n\nconst CardGallery = () => {\n  return (\n<div>\n        {comparisons.map((comparison) => (\n        <div className=\"grid p-4 bg-white rounded-lg shadow\" key={comparison.title}>\n          <h2 className=\"grid mb-2 text-lg font-medium\">{comparison.title}</h2>\n          <p className=\"grid mb-2 text-gray-500\">{comparison.date}</p>\n          <p className=\"grid mb-4 text-gray-500\">Frameworks: {comparison.frameworks.join(\", \")}</p>\n          <p className=\"grid mb-4 text-gray-500\">Use Case: {comparison.useCase}</p>\n          <ul>\n            {comparison.metrics.map((metric) => (\n              <li key={metric.name}>\n                <span className=\"grid font-medium\">{metric.name}: </span>\n                <span className=\"grid font-medium text-green-600\">{metric.winner}</span>\n                <span> beats </span>\n                <span className=\"grid font-medium text-red-600\">{metric.loser}</span>\n                <span> by </span>\n                <span className=\"grid font-medium\">{metric.percentDifference}%</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n</div>\n\n  );\n};\n\nexport default CardGallery;\n","import React from 'react';\nimport Methods from '../components/methods/Methods';\nimport CardGallery from '../components/cards/CardGallery';\n\nconst Resources = () => {\n\n\tconsole.log(CardGallery);\n\treturn (\n\t\t<section className=\"container py-5 mt-5 sm:py-10 sm:mt-10\">\n\t\t\t<div id=\"projects\" className=\"text-center\">\n\t\t\t\t<p className=\"p-1 text-4xl font-bold text-center text-transparent from-orange-500 via-black to-black bg-gradient-to-b bg-clip-text\">\n\t\t\t\t\tResources\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<Methods />\n\t\t\t<div className=\"grid grid-cols-1 mt-6 sm:grid-cols-2 lg:grid-cols-3 sm:gap-10\">\n\t\t\t\t<CardGallery />\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default Resources;\n"],"sourceRoot":""}